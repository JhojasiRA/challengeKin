name: Dry-run and Deployment

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - "**"
  pull_request:
    branches:
      - release/**
      - hotfix/**
    types:
      - synchronize
      - opened
      - reopened
      - unlocked

  workflow_dispatch:
    inputs:
      tags:
        description: "Specify Tag (optional)"
        required: false

env:
  DOCKER_FILE: "Dockerfile"
  CONTAINER_PORT: 80
  KUBERNETES_NAMESPACE: testing-automation
  SECURITY_NAMESPACE: security
  KUBERNETES_APP_NAME: testing-automation-commonservices
  HELM_CHART_NAME: testing-automation-commonservices
  CONTAINER_REGISTRY_NAME: ghcr.io
  BUILD_CONFIG: "Debug"
  HELM_CHART_RELATIVE_LOCATION: gitops/chart
  TERRAFORM_TEMPLATES_RELATIVE_LOCATION: gitops/terraform
  TERRAFORM_VERSION: 0.14.x
#  APPLICATION_PQDN: testing-automation # as in testing-automation.lemans-sandbox.rockwellautomation.com
  HELM_TIMEOUT: 600s

jobs:
  build:
    if: |
      (github.event_name == 'pull_request' && github.actor == 'dependabot[bot]') ||
      (github.event_name == 'push' && github.actor != 'dependabot[bot]')
    timeout-minutes: 120
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # Fetches entire history, so we can analyze commits since last tag.
          fetch-depth: 0
          token: ${{ secrets.READ_GITHUB_ACTIONS_PAT }}
          submodules: recursive

      - name: Checkout RA Action Repo
        uses: actions/checkout@v2
        with:
          repository: Rockwell-Automation-Inc/actions
          ref: v9.3
          token: ${{ secrets.READ_GITHUB_ACTIONS_PAT }}
          path: .github/actions

      - name: Helm Lint
        run: |
          find ./${{ env.HELM_CHART_RELATIVE_LOCATION }} -name '*-values.yaml' -exec helm lint ${{ env.HELM_CHART_RELATIVE_LOCATION }} -f {} \;

      # We need a predictable tag version, so let's serialize the workflows from this point.
      - name: Turnstyle
        if: github.event.inputs.tags || 
            github.ref == 'refs/heads/master' || 
            github.ref == 'refs/heads/main' || 
            github.ref == 'refs/heads/release' || 
            github.ref == 'refs/heads/develop'
        uses: softprops/turnstyle@v1
        with:
          same-branch-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine next tag
        if: github.ref == 'refs/heads/master' || 
            github.ref == 'refs/heads/main' || 
            github.ref == 'refs/heads/release'
        id: next_tag
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: master
          # RELEASE_BRANCHES: main
          PRERELEASE_SUFFIX: prerelease
          DRY_RUN: true

      - name: Determine next tag
        if: github.ref != 'refs/heads/master' && 
            github.ref != 'refs/heads/main' && 
            github.ref != 'refs/heads/release'
        id: next_tag_dev
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: master
          # RELEASE_BRANCHES: main
          PRERELEASE_SUFFIX: development
          DRY_RUN: true

      - name: Docker Login to GitHub Container Registry
        run: |
          echo ${{ secrets.READ_WRITE_GITHUB_PACKAGES_PAT }} | docker login ${{ env.CONTAINER_REGISTRY_NAME }} --username ${{ secrets.READ_WRITE_GITHUB_PACKAGES_USER }} --password-stdin

      # Build the Docker image tagged for pre-release or release.
      - name: Build the Docker image
        run: |
          docker build . --file ${{ env.DOCKER_FILE }} --tag buildimage          
      - uses: ./.github/actions/common-outputs
        if: github.event.inputs.tags || 
            github.ref == 'refs/heads/master' || 
            github.ref == 'refs/heads/main' || 
            github.ref == 'refs/heads/release' || 
            github.ref == 'refs/heads/develop'
        id: common

      - name: Re-tag and push the Docker image
        if: github.event.inputs.tags || 
            github.ref == 'refs/heads/master' || 
            github.ref == 'refs/heads/main' || 
            github.ref == 'refs/heads/release' || 
            github.ref == 'refs/heads/develop'
        run: |
          docker tag buildimage ${DOCKER_TAG}:${BUILD_VERSION}
          docker push ${DOCKER_TAG}:${BUILD_VERSION}
        env:
          DOCKER_TAG: ${{ steps.common.outputs.container-registry-docker-tag }}
          BUILD_VERSION: ${{ steps.next_tag.outputs.new_tag || 
                              steps.next_tag_dev.outputs.new_tag || 
                              github.event.inputs.tags }}

      - name: Apply version to Helm chart and values
        if: github.event.inputs.tags || 
            github.ref == 'refs/heads/master' || 
            github.ref == 'refs/heads/main' || 
            github.ref == 'refs/heads/release' || 
            github.ref == 'refs/heads/develop'
        run: |
          find ./${{ env.HELM_CHART_RELATIVE_LOCATION }} -name 'Chart.yaml' -exec sed -i 's|version: 0.0.1|version: '$BUILD_VERSION'|g' {} +
          find ./${{ env.HELM_CHART_RELATIVE_LOCATION }} -name 'Chart.yaml' -exec sed -i 's|appVersion: 0.0.1|appVersion: '$BUILD_VERSION'|g' {} +
          find ./${{ env.HELM_CHART_RELATIVE_LOCATION }} -name '*values.yaml' -exec sed -i 's|profile-0.0.1|profile-'$BUILD_VERSION'|g' {} +
          find ./${{ env.HELM_CHART_RELATIVE_LOCATION }} -name '*values.yaml' -exec sed -i 's|${{ env.KUBERNETES_APP_NAME }}-0.0.1|${{ env.KUBERNETES_APP_NAME }}-'$BUILD_VERSION'|g' {} +
        env:
          BUILD_VERSION: ${{ github.event.inputs.tags || steps.next_tag.outputs.new_tag || steps.next_tag_dev.outputs.new_tag }}

      - name: Archive helm-charts artifacts
        if: github.event.inputs.tags || 
            github.ref == 'refs/heads/master' || 
            github.ref == 'refs/heads/main' || 
            github.ref == 'refs/heads/release' || 
            github.ref == 'refs/heads/develop'
        uses: actions/upload-artifact@v2
        with:
          name: helm-charts
          path: ${{ env.HELM_CHART_RELATIVE_LOCATION }}
    
  sandbox-application-deployment:
    if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
    needs: [build]
    timeout-minutes: 180
    runs-on:
      - self-hosted
      - ${{ matrix.location }}
      - ${{ matrix.environment }}
      - deployment
    environment:
      name: ${{ matrix.environment }}
    strategy:
      fail-fast: false  # Don't fail all if one fails.
      matrix:
        location: [eastus2]
        include:
          - location: eastus2
            environment: sandbox
            resource_group_prefix: rg-sandbox-usermanaged-aks
            cluster_name: aks-eastus2-sandbox0
            key_vault_name: kv-0083-eastus2-LeMans
            identity_resource_id: /subscriptions/a7ffc9c0-e376-4bb4-8f03-b13f138296d0/resourceGroups/rg-sandbox-usermanaged-aks-eastus2/providers/Microsoft.ManagedIdentity/userAssignedIdentities/aks-keyvault-managed-identity
            identity_client_id: 16461407-dd82-438a-9c9c-df523d82c745
    env:
      AZURE_TENANT_ID: ${{ secrets.AZURE_ROCKWELL_AUTOMATION_TENANT_ID }}
      DEPLOYMENT_ENVIRONMENT: sandbox
      KUBECONFIG: ${{ secrets.LEMANS_SANDBOX_KUBECONFIGS }}

    steps:
      - name: Checkout RA Action Repo
        uses: actions/checkout@v2
        with:
          repository: Rockwell-Automation-Inc/actions
          ref: v9.3
          token: ${{ secrets.READ_GITHUB_ACTIONS_PAT }}
          path: .github/actions

      - name: Download Helm Chart artifacts
        uses: actions/download-artifact@v2
        with:
          name: helm-charts
          path: ${{ env.HELM_CHART_RELATIVE_LOCATION }}

      - name: Login to Azure using MSI
        run: |
          az login --identity

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.LEMANS_SANDBOX_KUBECONFIGS }}
          context: ${{ matrix.cluster_name }}-admin

      - name: Start deployment
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.DEPLOYMENT_ENVIRONMENT }}

      # Create additional Kubernetes namespace if they don't exist yet.
      - name: Create Kubernetes namespaces (if they don't exist)
        run: |
          kubectl create namespace ${{ env.KUBERNETES_NAMESPACE}} --dry-run=client -o json | kubectl apply -f -
          kubectl create namespace ${{ env.SECURITY_NAMESPACE }} --dry-run=client -o json | kubectl apply -f -

      # Create image-pull-secret for GitHub Package registry.
      - name: Create Kubernetes secret for GitHub access (if it doesn't exist)
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.KUBERNETES_NAMESPACE }}
          container-registry-url: ${{ env.CONTAINER_REGISTRY_NAME }}
          container-registry-username: ${{ secrets.READ_GITHUB_PACKAGES_USER }}
          container-registry-password: ${{ secrets.READ_GITHUB_PACKAGES_PAT }}
          secret-name: image-pull-secrets

      - name: Deployment
        run: |
          helm upgrade --install --atomic --debug ${{ env.KUBERNETES_APP_NAME }} \
            ${{ env.HELM_CHART_RELATIVE_LOCATION }} \
            -f ${{ env.HELM_CHART_RELATIVE_LOCATION }}/${{ matrix.environment }}-values.yaml \
            --namespace=${{ env.KUBERNETES_NAMESPACE}} \
            --create-namespace \
            --wait \
            --timeout ${{ env.HELM_TIMEOUT }} \
            --set keyVault.name="${{ matrix.key_vault_name }}" \
            --set keyVault.tenantId="${{ env.AZURE_TENANT_ID }}" \
            --set armAuth.identityResourceID="${{ matrix.identity_resource_id }}" \
            --set armAuth.identityClientID="${{ matrix.identity_client_id }}"

      - name: DevOpstic event payload - success
        uses: ./.github/actions/devopstic-eventpayload
        if: success()
        continue-on-error: true
        id: eventpayloadsuccess
        with:
          event-commit_id: $GITHUB_SHA
          event-type: "deploy"
          event-pipeline_id: $GITHUB_REPOSITORY
          event-environment: ${{ matrix.environment }}
          event-status: "success"

      - name: DevOpstic event payload - failed
        uses: ./.github/actions/devopstic-eventpayload
        if: failure()
        continue-on-error: true
        id: eventpayloadfailure
        with:
          event-commit_id: $GITHUB_SHA
          event-type: "deploy"
          event-pipeline_id: $GITHUB_REPOSITORY
          event-environment: ${{ matrix.environment }}
          event-status: "failed"

      - name: Update deployment status
        uses: bobheadxi/deployments@v0.6.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

  create-devprerelease:
    if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
    needs: sandbox-application-deployment
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.HELM_CHART_RELATIVE_LOCATION }}

      - name: Create Release Artifact
        run: |
          zip -r ../${{ env.KUBERNETES_APP_NAME }}.zip ${{ env.HELM_CHART_RELATIVE_LOCATION }}

      - name: Checkout repository with entire history
        uses: actions/checkout@v2
        with:
          # Fetches entire history, so we can analyze commits since last tag.
          fetch-depth: 0

      - name: Bump version and push tag
        id: create_tag
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: master
          PRERELEASE_SUFFIX: development
          DRY_RUN: false

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag || github.event.inputs.tags }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag || github.event.inputs.tags }}
          body: Change logs temporarily disabled.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../${{ env.KUBERNETES_APP_NAME }}.zip
          asset_name: ${{ env.KUBERNETES_APP_NAME }}.zip
          asset_content_type: application/zip

  nonprod-application-deployment:
    if: ${{ github.ref == 'refs/heads/release' && github.event_name == 'push' }}
    needs: [build]
    timeout-minutes: 180
    runs-on:
      - self-hosted
      - ${{ matrix.location }}
      - ${{ matrix.environment }}
      - deployment
    environment:
      name: ${{ matrix.environment }}
    strategy:
      fail-fast: false  # Don't fail all if one fails.
      matrix:
        location: [eastus2]
        include:
          - location: eastus2
            environment: nonprod
            resource_group_prefix: rg-dev-usermanaged-aks
            cluster_name: aks-eastus2-dev0
            key_vault_name: kv-0117-eastus2-LeMans
            identity_resource_id: /subscriptions/13960a1d-f5d0-4cc1-b82e-8bb9c42aa6fa/resourceGroups/rg-dev-usermanaged-aks-eastus2/providers/Microsoft.ManagedIdentity/userAssignedIdentities/aks-keyvault-managed-identity
            identity_client_id: 8520892a-aa21-40a5-9941-4ee093966d55
    env:
      AZURE_TENANT_ID: ${{ secrets.AZURE_ROCKWELL_AUTOMATION_TENANT_ID }}
      DEPLOYMENT_ENVIRONMENT: nonprod
      KUBECONFIG: ${{ secrets.LEMANS_NONPROD_KUBECONFIGS }}


    steps:
      - name: Checkout RA Action Repo
        uses: actions/checkout@v2
        with:
          repository: Rockwell-Automation-Inc/actions
          ref: v9.3
          token: ${{ secrets.READ_GITHUB_ACTIONS_PAT }}
          path: .github/actions

      - name: Download Helm Chart artifacts
        uses: actions/download-artifact@v2
        with:
          name: helm-charts
          path: ${{ env.HELM_CHART_RELATIVE_LOCATION }}
      # ... Actual deployment ...

      - name: Login to Azure using MSI
        run: |
          az login --identity

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.LEMANS_NONPROD_KUBECONFIGS }}
          context: ${{ matrix.cluster_name }}-admin

      - name: Start deployment
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.DEPLOYMENT_ENVIRONMENT }}

      # Create additional Kubernetes namespace if they don't exist yet.
      - name: Create Kubernetes namespaces (if they don't exist)
        run: |
          kubectl create namespace ${{ env.KUBERNETES_NAMESPACE}} --dry-run=client -o json | kubectl apply -f -
          kubectl create namespace ${{ env.SECURITY_NAMESPACE }} --dry-run=client -o json | kubectl apply -f -

      # Create image-pull-secret for GitHub Package registry.
      - name: Create Kubernetes secret for GitHub access (if it doesn't exist)
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.KUBERNETES_NAMESPACE }}
          container-registry-url: ${{ env.CONTAINER_REGISTRY_NAME }}
          container-registry-username: ${{ secrets.READ_GITHUB_PACKAGES_USER }}
          container-registry-password: ${{ secrets.READ_GITHUB_PACKAGES_PAT }}
          secret-name: image-pull-secrets

      - name: Deployment
        run: |
          helm upgrade --install --atomic --debug ${{ env.KUBERNETES_APP_NAME }} \
            ${{ env.HELM_CHART_RELATIVE_LOCATION }} \
            -f ${{ env.HELM_CHART_RELATIVE_LOCATION }}/${{ matrix.environment }}-values.yaml \
            --namespace=${{ env.KUBERNETES_NAMESPACE}} \
            --create-namespace \
            --wait \
            --timeout ${{ env.HELM_TIMEOUT }} \
            --set keyVault.name="${{ matrix.key_vault_name }}" \
            --set keyVault.tenantId="${{ env.AZURE_TENANT_ID }}" \
            --set armAuth.identityResourceID="${{ matrix.identity_resource_id }}" \
            --set armAuth.identityClientID="${{ matrix.identity_client_id }}"

      - name: DevOpstic event payload - success
        uses: ./.github/actions/devopstic-eventpayload
        if: success()
        continue-on-error: true
        id: eventpayloadsuccess
        with:
          event-commit_id: $GITHUB_SHA
          event-type: "deploy"
          event-pipeline_id: $GITHUB_REPOSITORY
          event-environment: ${{ matrix.environment }}
          event-status: "success"

      - name: DevOpstic event payload - failed
        uses: ./.github/actions/devopstic-eventpayload
        if: failure()
        continue-on-error: true
        id: eventpayloadfailure
        with:
          event-commit_id: $GITHUB_SHA
          event-type: "deploy"
          event-pipeline_id: $GITHUB_REPOSITORY
          event-environment: ${{ matrix.environment }}
          event-status: "failed"

      - name: Update deployment status
        uses: bobheadxi/deployments@v0.6.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

  create-prerelease:
    if: ${{ github.ref == 'refs/heads/release' && github.event_name == 'push' }}
    needs: nonprod-application-deployment
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.HELM_CHART_RELATIVE_LOCATION }}

      - name: Create Release Artifact
        run: |
          zip -r ../${{ env.KUBERNETES_APP_NAME }}.zip ${{ env.HELM_CHART_RELATIVE_LOCATION }}

      - name: Checkout repository with entire history
        uses: actions/checkout@v2
        with:
          # Fetches entire history, so we can analyze commits since last tag.
          fetch-depth: 0

      - name: Bump version and push tag
        id: create_tag
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: master
          PRERELEASE_SUFFIX: prerelease
          DRY_RUN: false

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag || github.event.inputs.tags }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag || github.event.inputs.tags }}
          body: Change logs temporarily disabled.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../${{ env.KUBERNETES_APP_NAME }}.zip
          asset_name: ${{ env.KUBERNETES_APP_NAME }}.zip
          asset_content_type: application/zip

  production-application-deployment:
    if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }}
    needs: [build]
    timeout-minutes: 180
    runs-on:
      - self-hosted
      - ${{ matrix.location }}
      - ${{ matrix.environment }}
      - deployment
    environment:
      name: ${{ matrix.environment }}
    strategy:
      fail-fast: false  # Don't fail all if one fails.
      matrix:
        location: [eastus2]
        include:
          - location: eastus2
            environment: production
            resource_group_prefix: rg-production-usermanaged-aks
            cluster_name: aks-eastus2-production0
            key_vault_name: kv-0118-eastus2-LeMans
            identity_resource_id: /subscriptions/f640c38c-4250-49fd-9a7b-0cf526feb98f/resourceGroups/rg-production-usermanaged-aks-eastus2/providers/Microsoft.ManagedIdentity/userAssignedIdentities/aks-keyvault-managed-identity
            identity_client_id: 5eda9a11-993b-474f-837f-26681fa799ba
    env:
      AZURE_TENANT_ID: ${{ secrets.AZURE_ROCKWELL_AUTOMATION_TENANT_ID }}
      DEPLOYMENT_ENVIRONMENT: production
      KUBECONFIG: ${{ secrets.LEMANS_PRODUCTION_KUBECONFIGS }}

    steps:
      - name: Checkout RA Action Repo
        uses: actions/checkout@v2
        with:
          repository: Rockwell-Automation-Inc/actions
          ref: v9.3
          token: ${{ secrets.READ_GITHUB_ACTIONS_PAT }}
          path: .github/actions

      - name: Download Helm Chart artifacts
        uses: actions/download-artifact@v2
        with:
          name: helm-charts
          path: ${{ env.HELM_CHART_RELATIVE_LOCATION }}

      # ... Actual deployment ...
      - name: Login to Azure using MSI
        run: |
          az login --identity

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.LEMANS_PRODUCTION_KUBECONFIGS }}
          context: ${{ matrix.cluster_name }}-admin

      - name: Start deployment
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.DEPLOYMENT_ENVIRONMENT }}

      # Create additional Kubernetes namespace if they don't exist yet.
      - name: Create Kubernetes namespaces (if they don't exist)
        run: |
          kubectl create namespace ${{ env.KUBERNETES_NAMESPACE}} --dry-run=client -o json | kubectl apply -f -
          kubectl create namespace ${{ env.SECURITY_NAMESPACE }} --dry-run=client -o json | kubectl apply -f -

      # Create image-pull-secret for GitHub Package registry.
      - name: Create Kubernetes secret for GitHub access (if it doesn't exist)
        uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.KUBERNETES_NAMESPACE }}
          container-registry-url: ${{ env.CONTAINER_REGISTRY_NAME }}
          container-registry-username: ${{ secrets.READ_GITHUB_PACKAGES_USER }}
          container-registry-password: ${{ secrets.READ_GITHUB_PACKAGES_PAT }}
          secret-name: image-pull-secrets

      - name: Deployment
        run: |
          helm upgrade --install --atomic --debug ${{ env.KUBERNETES_APP_NAME }} \
            ${{ env.HELM_CHART_RELATIVE_LOCATION }} \
            -f ${{ env.HELM_CHART_RELATIVE_LOCATION }}/${{ matrix.environment }}-values.yaml \
            --namespace=${{ env.KUBERNETES_NAMESPACE}} \
            --create-namespace \
            --wait \
            --timeout ${{ env.HELM_TIMEOUT }} \
            --set keyVault.name="${{ matrix.key_vault_name }}" \
            --set keyVault.tenantId="${{ env.AZURE_TENANT_ID }}" \
            --set armAuth.identityResourceID="${{ matrix.identity_resource_id }}" \
            --set armAuth.identityClientID="${{ matrix.identity_client_id }}"

      - name: DevOpstic event payload - success
        uses: ./.github/actions/devopstic-eventpayload
        if: success()
        continue-on-error: true
        id: eventpayloadsuccess
        with:
          event-commit_id: $GITHUB_SHA
          event-type: "deploy"
          event-pipeline_id: $GITHUB_REPOSITORY
          event-environment: ${{ matrix.environment }}
          event-status: "success"

      - name: DevOpstic event payload - failed
        uses: ./.github/actions/devopstic-eventpayload
        if: failure()
        continue-on-error: true
        id: eventpayloadfailure
        with:
          event-commit_id: $GITHUB_SHA
          event-type: "deploy"
          event-pipeline_id: $GITHUB_REPOSITORY
          event-environment: ${{ matrix.environment }}
          event-status: "failed"

      - name: Update deployment status
        uses: bobheadxi/deployments@v0.6.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

  create-release:
    if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }}
    needs: production-application-deployment
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.HELM_CHART_RELATIVE_LOCATION }}

      - name: Create Release Artifact
        run: |
          zip -r ../${{ env.KUBERNETES_APP_NAME }}.zip ${{ env.HELM_CHART_RELATIVE_LOCATION }}

      - name: Checkout repository with entire history
        uses: actions/checkout@v2
        with:
          # Fetches entire history, so we can analyze commits since last tag.
          fetch-depth: 0

      - name: Bump version and push tag
        id: create_tag
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: master
          PRERELEASE_SUFFIX: prerelease
          DRY_RUN: false

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag || github.event.inputs.tags }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag || github.event.inputs.tags }}
          body: Change logs temporarily disabled.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../${{ env.KUBERNETES_APP_NAME }}.zip
          asset_name: ${{ env.KUBERNETES_APP_NAME }}.zip
          asset_content_type: application/zip